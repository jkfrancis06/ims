# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $projectDir: '%kernel.project_dir%'
            $courrierDir: '%kernel.project_dir%/ressources/private'
            $ressourcesDir: '%kernel.project_dir%/ressources'
            $loggerDir: '%kernel.project_dir%/ressources/logger'
            $affaireDir: '%kernel.project_dir%/ressources/affaires'
            $targetDirectory: '%kernel.project_dir%/public/upload'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    App\EventListener\CustomUserChecksListener:
        tags:
            - { name: 'kernel.event_listener'}

    #App\EventListener\LoginListener:
    #    tags:
     #       - { name: 'kernel.event_listener', event: security.authentication.failure, method: onAuthenticationFailure }


    #app.listener.authentication_failure_event_listener:
     #   class: App\EventListener\LoginListener
      #  tags:
       #     - { name: kernel.event_listener, event: security.authentication.failure, method: onAuthenticationFailure }

    App\EventListener\RouteEventListener:
        tags:
            - { name: 'kernel.event_listener', event: kernel.controller, method: onKernelController }


    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

        # acme_api.event.jwt_created_listener:
        #   class: App\EventListener\JWTCreatedListener
        #   arguments: [ '@request_stack' ]
            #   tags:
        #       - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }

        # acme_api.event.authentication_failure_listener:
            #class: App\EventListener\AuthenticationFailureListener
            #    tags:
        #   - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_failure, method: onAuthenticationFailureResponse }

        # acme_api.event.jwt_invalid_listener:
        # class: App\EventListener\JWTInvalidListener
            # tags:
        #    - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_invalid, method: onJWTInvalid }

        #acme_api.event.jwt_notfound_listener:
        #class: App\EventListener\JWTNotFoundListener
            # tags:
        # - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_not_found, method: onJWTNotFound }

        # acme_api.event.jwt_expired_listener:
        # class: App\EventListener\JWTExpiredListener
            #tags:
        #- { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_expired, method: onJWTExpired }



    app.login_rate_limiter:
        class: Symfony\Component\Security\Http\RateLimiter\DefaultLoginRateLimiter
        arguments:
            # globalFactory is the limiter for IP
            $globalFactory: '@limiter.ip_login'
            # localFactory is the limiter for username+IP
            $localFactory: '@limiter.username_ip_login'

    App\Service\FileUploader:
        arguments:
            $targetDirectory: '%kernel.project_dir%/public/upload'
            $affaireDir: '%kernel.project_dir%/ressources/affaires'

    foo:
        class: App\Enti\To\Foo
        arguments: [ '%kernel.project_dir%' ]

    serializer.normalizer.datetime:
        class: App\Normalizer\DateTimeNormalizer
        tags:
            - { name: serializer.normalizer }
